#ifndef Alarm_h_
#define Alarm_h_
/*-----------------------------------------------------------------------------
* This file is part of the Colony.Core Project.  The Colony.Core Project is an
* open source project with a BSD type of licensing agreement.  See the license
* agreement (license.txt) in the top/ directory or on the Internet at
* http://integerfox.com/colony.core/license.txt
*
* Copyright (c) 2014-2020  John T. Taylor
*
* Redistributions of the source code must retain the above copyright notice.
*----------------------------------------------------------------------------*/
/** @file */

#include <stdint.h>
#include <stdlib.h>
#include <memory.h>


/** The following typedef is used to store metrics values generated by the
    applications Algorithm.

    Note: The Data Model's default isDataEqual_() method used the memcmp()
          function.  In order to leverage the Data Model's default method with
          the Alarm_T data structure as a MP value - constructor/copy methods 
          are provided to ensure any pad bytes in the structure get zero'd so 
          that the memcmp() function behaves as expected.  An alternative to 
          this approach is for the Application to override the default 
          isDataEqual() method when defining a model point (e.g. see the 
          Cpl::Dm::Mp::Float and Cpl::Dm::Mp::Double classes).
 */
struct Alarm_T
{
    uint32_t signal;        //!< Signal value at the time the Alarm was asserted
    bool     acknowledged;  //!< Set to true if/when the Alarm has acknowledged by the User

    /// Constructor (to ensure any pad bytes get zero'd)
    Alarm_T()
    {
        memset( (void*) this, 0, sizeof( Alarm_T ) );
    }

    /// Copy Constructor (to ensure any pad bytes get zero'd)
    Alarm_T( const Alarm_T& other )
    {
        memcpy( (void*) this, (void*) &other, sizeof( Alarm_T ) );
    }

    /// Copy operator
    Alarm_T& operator =( const Alarm_T& other )
    {
        memcpy( (void*) this, (void*) &other, sizeof( Alarm_T ) );
        return *this;
    }
};

#endif  // end header latch
